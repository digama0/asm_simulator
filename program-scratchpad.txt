// Multiplication program
// Load x into R0 and y into R1.
0  AND R2, R2, #0
1  ADD R3, R1, #0
2  ADD R4, R2, #1
3  AND R5, R0, R4
4  BRz 6
5  ADD R2, R2, R3
6  ADD R3, R3, R3
7  ADD R4, R4, R4
8  BRnp 3
9  RET // result x*y with no overflow is in R2


// Quine
10 DATA 0000 // current loc (filled by prog)
11 DATA 1000 // header start
12 DATA 0067 // header len
13 DATA 0067 // end of text
14 DATA 1010 // exec
15 AND R0, R0, #0 // a = 1
16 ADD R0, R0, #1 // b = *m[0]
17 LEA R1, x0 {   // do {
18 STR R0, R1, x0 //   m[b] = a
19 ADD R1, R1, #1 //   b++
1A ADD R0, R0, R0 //   a *= 2
1B BRnp 18 }      // } while (a != 0)
1C AND R1, R1, #0
1D ADD R0, R1, #48
1E TRAP OUT
1F LD R6, x11
20 JSR x50
21 LD R6, x12
22 JSR x50
23 AND R1, R1, #0
24 ADD R0, R1, #A
25 TRAP OUT
26 LEA R2, x15
27 ST R2, x10
28 AND R1, R1, #0
29 ADD R0, R1, #54
2A TRAP OUT
2B LD R2, x10
2C JSR x50
2D LD R2, x10
2E LDR R6, R2, x0
2F JSR x50
30 AND R1, R1, #0
31 ADD R0, R1, #A
32 TRAP OUT
33 LD R2, x10
34 ADD R2, R2, #1
35 LD R3, x13
36 LEA R4, x0
37 ADD R3, R3, R4
38 NOT R3
39 ADD R3, R3, R2
3A BRn 28
3B AND R1, R1, #0
3C ADD R0, R1, #54
3D TRAP OUT
3E LD R2, x14
3F JSR x50
4A AND R1, R1, #0
4B ADD R0, R1, #A
4C TRAP OUT
4D TRAP HALT
4E DATA 0000
4F DATA 0000        // hex in R6
50 AND R1, R1, #0   // b = 12
51 ADD R1, R1, #C { // do {
52 AND R0, R0, #0   //   a = 0
53 ADD R2, R0, #3 { //   c = 3; do {
54 LEA R3, x0       //     d = *m[0]
55 ADD R3, R3, R1   //     d += b
56 ADD R3, R3, R2   //     d += c
57 LDR R3, R3, x0   //     d = m[b+c]
58 AND R4, R3, R6   //     e = g & c
59 BRz 10E {        //     if (g & c != 0) {
5A LEA R3, x0       //       d = *m[0]
5B ADD R3, R3, R2   //       d += c
5C LDR R3, R3, x0   //       d = m[c]
5D ADD R0, R0, R3 } //       a += m[c] }
5E ADD R2, R2, #-1  //     c--
5F BRzp 104 }       //   } while (c >= 0)
60 ADD R0, R0, #-10 //   a -= 10
61 BRn 113 {        //   if (a >= 0)
62 ADD R0, R0, #7 } //     a += 7
63 ADD R0, R0, #58  //   a += 58
64 TRAP OUT         //   print(a)
65 ADD R1, R1, #-4  //   b -= 4
66 BRzp 102         // } while (b >= 0)
67 RET