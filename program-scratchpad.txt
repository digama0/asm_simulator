// Multiplication program
// Load x into R0 and y into R1.
0  54A0 AND R2, R2, #0
1  1660 ADD R3, R1, #0
2  18A1 ADD R4, R2, #1
3  5A04 AND R5, R0, R4
4  0406 BRz 6
5  1483 ADD R2, R2, R3
6  16C3 ADD R3, R3, R3
7  1904 ADD R4, R4, R4
8  0A03 BRnp 3
9  D000 RET // result x*y with no overflow is in R2


// Quine
10      DATA xxxx // current loc (cl) (filled by prog)
11 0001 DATA 0001 // constants (c[.])
12 000A DATA 000A //  | \n
13 003A DATA 003A //  |
14 0054 DATA 0054 // -+ T
15 0048 DATA 0048 // string "HQUINE_"
16 0051 DATA 0051 //  |
17 0055 DATA 0055 //  |
18 0049 DATA 0049 //  |
19 004E DATA 004E //  |
1A 0045 DATA 0045 //  | E
1B 005F DATA 005F //  |
1C 0000 DATA 0000 // -+
1D 1000 DATA 1000 // header start (hs)
1E 005E DATA 005E // header len (hl)
1F 105D DATA 105D // end of text (et)
20 1021 DATA 1021 // exec (ex)
21 2011 LD R0, x11     // a = 1 
22 E200 LEA R1, x0 {   // b = *m[0]; do {
23 7040 STR R0, R1, x0 //   m[b] = a
24 1261 ADD R1, R1, #1 //   b++
25 1000 ADD R0, R0, R0 //   a *= 2
26 0A23 BRnp 23 }      // } while (a != 0)
27 E015 LEA R0, x15 // "HQUINE_" string
28 F022 TRAP PUTS
29 2C1D LD R6, x1D // hs
2A 4847 JSR x47
2B 2C1E LD R6, x1E // hl
2C 4847 JSR x47
2D 2012 LD R0, x12 // c[A]
2E F021 TRAP OUT
2F E411 LEA R2, x11 {
30 3410 ST R2, x10
31 2014 LD R0, x14 // c[54]
32 F021 TRAP OUT
33 2C10 LD R6, x10
34 4847 JSR x47
35 2410 LD R2, x10
36 6C80 LDR R6, R2, x0
37 4847 JSR x47
38 2012 LD R0, x12 // c[A]
39 F021 TRAP OUT
3A 2410 LD R2, x10
3B 14A1 ADD R2, R2, #1
3C 261F LD R3, x1F // et
3D 96C0 NOT R3, R3
3E 16C2 ADD R3, R3, R2
3F 0830 BRn 30 }
40 201A LD R0, x1A // c[45]
41 F021 TRAP OUT
42 2C20 LD R6, x20 // ex
43 4847 JSR x47
44 2012 LD R0, x12 // c[A]
45 F021 TRAP OUT
46 F025 TRAP HALT
                         // hex in R6
47 E20F LEA R1, xF {     // b = *m[15]; do {
48 5020 AND R0, R0, #0   //   a = 0
49 1423 ADD R2, R0, #3 { //   c = 3; do {
4A 6640 LDR R3, R1, x0   //     d = m[b]
4B 58C6 AND R4, R3, R6   //     e = g & c
4C 0451 BRz 51 {         //     if (g & c != 0) {
4D E600 LEA R3, x0       //       d = *m[0]
4E 16C2 ADD R3, R3, R2   //       d += c
4F 66C0 LDR R3, R3, x0   //       d = m[c]
50 1003 ADD R0, R0, R3 } //       a += m[c] }
51 127F ADD R1, R1, #-1  //     b--
52 14BF ADD R2, R2, #-1  //     c--
53 064A BRzp 4A }        //   } while (c >= 0)
54 1036 ADD R0, R0, #-A  //   a -= 10
55 0857 BRn 57 {         //   if (a >= 0)
56 1027 ADD R0, R0, #7 } //     a += 7
57 2413 LD R2, x13       //   c = 58
58 1002 ADD R0, R0, R2   //   a += c
59 F021 TRAP OUT         //   print(a)
5A 9640 NOT R3, R1       //   d = ~b
5B 56EF AND R3, R3, #F   //   d = ~b & 0xf
5C 0A48 BRnp 48 }        // } while (d != 0)
5D D000 RET